package dev.screenshotapi.core.usecases.auth

import dev.screenshotapi.core.domain.exceptions.AuthenticationException
import dev.screenshotapi.core.domain.repositories.UserRepository
import dev.screenshotapi.core.usecases.common.UseCase

class AuthenticateUserUseCase(
    private val userRepository: UserRepository
) : UseCase<AuthenticateUserRequest, AuthenticateUserResponse> {
    
    override suspend fun invoke(request: AuthenticateUserRequest): AuthenticateUserResponse {
        // Find user by email
        val user = userRepository.findByEmail(request.email)
            ?: throw AuthenticationException.InvalidCredentials()
        
        // Verify password (using simple hash for now, should use BCrypt in production)
        val expectedHash = request.password.hashCode().toString()
        if (user.passwordHash == null || user.passwordHash != expectedHash) {
            throw AuthenticationException.InvalidCredentials()
        }
        
        return AuthenticateUserResponse(
            success = true,
            userId = user.id,
            email = user.email,
            token = null // Token will be generated by controller
        )
    }
}

data class AuthenticateUserRequest(
    val email: String,
    val password: String
)

data class AuthenticateUserResponse(
    val success: Boolean,
    val userId: String? = null,
    val email: String? = null,
    val token: String? = null
)
